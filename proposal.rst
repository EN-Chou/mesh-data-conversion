=================
Proposal
=================


Basic Information
=================

Github: https://github.com/EN-Chou/mesh-data-conversion

Problem to Solve
================

Numerical solution of partial differential equations (PDEs) depends on discretization 
of space. The entities describing the discretized space are called grid or mesh.
Computational problem that requires to compute its numerical result on mesh differs 
from mesh generated only by its geometry features are in the scope of this problem.
 
To successful carry out the numerical analysis, there are 3 types of codes: 
(i) a mesh generator creates the mesh, (ii) a solver computes the solution, and 
(iii) a visualizer provides the analysis. The mesh data play a central role among 
the codes.

Different codes take different formats for the mesh data. There needs to be another 
code to convert the mesh and solution data for the corresponding codes. The 
converting code should work as a standalone executable.

While different codes take different formats for the mesh data, the numerical 
method that should be applied for solving the problem differs. Two applications
will be implemented in this project, which are CESE mesh conversion and uniform-
staggered grid conversion. The math tool required in both application may be
interpolation and extrapolation.

Prospective Users
=================

`Modmesh <https://github.com/solvcon/modmesh>`_. Now modmesh has `Gmsh <https://gmsh.info/>`_ 
as sample mesh, and the CESE solver is ready. The solver and the mesh are not linked 
together, this code bridge the two.

System Architecture
===================

The input of the system will take in `MSH file format <https://gmsh.info/doc/texinfo/gmsh.html#MSH-file-format>`_ 
and output a `.dat` file(TBD) for the code. 

The interface will be CLI, and it will be called via `make` tool. Regarding 
different numerical code, different target is made. The calling process will be 
scripted into `Makefile`, and it will be used to build C++ and python code, 
something like

.. code-block:: bash
    .PHONY: cese
    cese:
        g++ cese.cpp
        python3 cese.py

    .PHONY: stagger
    stagger:
        g++ stagger.cpp
        python3 stagger.py


The conversion process will be done via C++. It will be linked with Python via 
`pybind11`. 

In this system's work flow, the user specifies the `.msh` file and the 
numerical method in the terminal with `make`. The following flow will be scripted 
in `Makefile`, it will decide which `.py` file to run, and the `.py` file will 
execute the object file, which is generated by the corresponding `.cpp` file, and 
then it will generate the `.dat` file for the specified numerical method.

The constraints of this system is that, this system manage to convert mesh only 
for the CESE method and uniformed staggered grid. The assumed constraint is that 
the system will take 1 `.msh` file and 1 specified numerical method in one execution.

To describe the modularization of the system, there will be 2 applications, which 
are application to generate `.dat` for CESE and application to generate `.dat` 
for uniform staggered grid. Each application has a `.py` file and a `.cpp` file 
to perform desired behavior.

API Description
===============

+ Show how your system can be programmed.
The system can be programmed with bash script, python and C++ altogether. The interface 
will be CLI, the user use `make` tool to import `.msh` file and generate `.dat` 
file for the corresponding numerical code. Regarding different numerical code, 
different target is made, e.g,

for CESE
.. code-block:: bash
    make cese MESH_PATH=Geometria1.msh 

for uniform staggered grid
.. code-block:: bash
    make stagger MESH_PATH=Geometria1.msh


Engineering Infrastructure
==========================

The system should be automatically build with `make` tool, `g++` and `python`. 
The system should keep some sample `.msh` files in the system, and the CI workflow 
should make sure the system manage to generate correspond `.dat` files when the 
system is modified. This will be implemented with Github action, it will be scripted 
in `.github/workflows`.

+ Testing framework (TBD)
+ Documentation (TBD)

Schedule
========

* Planning phase (6 weeks from mm/dd to mm/dd):
* Session 1 (09/16): Survey the format of target mesh data.
* Session 2 (09/18): Prepare sample `.msh` files and learn its format.
* Session 3 (09/20): Draft a Makefile to allow reading `.msh` in python and writing a exact same file with C++.
(Trip from 9/21 - 9/26)
* Session 4 (09/28): Implement 2D uniform staggered grid conversion in C++
* Session 5 (10/01): Implement 1D CESE conversion in C++
* Session 6 (mm/dd):
* Session 7 (mm/dd):

References
==========

+ `Mesh data conversion <https://yyc.solvcon.net/en/latest/nsd/project/project.html#mesh-data-conversio>`_ 
+ `CESE <https://pdf.sciencedirectassets.com/272570/1-s2.0-S0021999100X00964/1-s2.0-S0021999185711370/main.pdf?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHEaCXVzLWVhc3QtMSJGMEQCIHu7hK0Y76t9bNf3at7l44bhy46rw2feF5PPHB2ny%2BOrAiBdLo3dVpHSYOVXnU43pO50HBLTx7b9uAPmAz5JWlKfSiqyBQhZEAUaDDA1OTAwMzU0Njg2NSIMN1rxje6G2VSW3v2QKo8FGWoaq%2B8ylvWjm43WmrSMnkiLCXSxfwZO7DXFVT4OuQV1twt4XKGHFjhqEcp0XEImhdi%2BiqQHd16HzMG6TgThcD1Ko0v%2B2Bh%2FdQmQMirt51Yaaow2toUmWlwSRy6LqVV2Gb4bL3gctzrviL15eEmUDXDphWqDfuly9VIzCksN%2Fxu7Ra4O9ZThsQQ7T5kYEtwOB9ntAQWYS2rMTN45uasEEGQE%2Fq5ksk3QIjxkk2hYFVbxl%2BjTk9YnEd0l90FfGISlEegNGeETXBfHFRDDSTcXFfIiD%2FrCjD72hXyPfqJxqs0pCrjQgtpeY%2B5tWBUFhswC4Q95hBht7vMlQ6JZapBcDGzIrqHtZ2cwMki9jXxBogeDlqxw3j2VDFtHs%2Bez8ifKeuV2kzAeH4DXIlS3E1X1T7IHu5RjyTDxJZEP60VLAAT%2BIIAMStuJdixgZyiRq27tXUPuVpPwl9ui4xKD2HvWI6BiR1BIp%2BmMHDYwt7tVhN%2FmyCxPWDSsrhjApcWkHp3C6ZxqI2C3ffk2PR5h1kx08%2F6qAgUHv7bhsioWBmvE6sLXGgze3NxPJOUQhTPfvx1BTLkXp4mujgOghjflfkg3EZf3kaddxuhP%2BiPUdkowh2ZdTQEqfUBg8ffNVNemqxppdUmaP6arP4F%2B48BBgTrdWYCJwyzqHE66jAY2Yg6unKmHOgcaTR%2F6BZHgShquWrw0Vi1mI7GJtnvilG6gZM4mcWlEbQ8zgeZ54lq%2B2lmbt%2Bj8TNG05IzjGjiLrWZFJ1UrHy%2Fg2nwuMjDb%2FjryXxelQIFFsCFFbrn0tIJ1Ys9oJneYAOtUB%2Bc4znX%2Bu5PFDDXWfC0Gv%2BJ4kiulHWup19GksL6dJOB0S2FXi6fBKNEytzCKpZCoBjqyAdgOFP9qqmGyjHPXev24CR0zvZLy35RgKxvTH9UolaeVOlBQ5Z236xrqn0tW1W5WhU6k%2BPWPsxz1sjO%2BVKmLLIKKSCwxU%2BjJ4v59062lC76HIs%2FcWRP0Kk42H3oIXGkWX1MyDV%2F8cE2hxRpaNuG37B9vkWf%2BJ7N12kHBw41WF9l%2Fj2h3aoMxVt8354cI4tPbG45vTB7%2FvZU94GbQtXzQXqGAJy%2F5ppQuU2PdXARCQIdJRCM%3D&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20230915T090301Z&X-Amz-SignedHeaders=host&X-Amz-Expires=300&X-Amz-Credential=ASIAQ3PHCVTY5O4TA4WM%2F20230915%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=70fce706e517bc83031ed78e34eb86998a4b9476d191871562bfcd4e4e981726&hash=30b2770ccab809005a5cac9e4a0e9a258283e0f821cc9e306b4c8ab17feca900&host=68042c943591013ac2b2430a89b270f6af2c76d8dfd086a07176afe7c76c2c61&pii=S0021999185711370&tid=spdf-5171f8c5-fb16-4ce0-8204-454828ca8d3b&sid=29af1feb7d43524ecd4a4313cc6e5ee73034gxrqa&type=client&tsoh=d3d3LnNjaWVuY2VkaXJlY3QuY29t&ua=0e145b5150090c550653&rr=806fb1b1dd56073c&cc=tw>`_
+ `Staggered grid <https://tum-pbs.github.io/PhiFlow/Staggered_Grids.html>`_
+ `Gmsh <https://gmsh.info/>`_
+ `Pybind11 <https://pybind11.readthedocs.io/en/stable/>`_